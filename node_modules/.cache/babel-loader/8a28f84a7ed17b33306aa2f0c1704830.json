{"ast":null,"code":"import _taggedTemplateLiteral from\"C:\\\\Users\\\\Syed Muzammil\\\\Desktop\\\\portfolio\\\\myapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"C:\\\\Users\\\\Syed Muzammil\\\\Desktop\\\\portfolio\\\\myapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n        {\\n        user(login: \\\"\",\"\\\") {\\n          pinnedItems(first: 6, types: [REPOSITORY]) {\\n            totalCount\\n            edges {\\n              node {\\n                ... on Repository {\\n                  name\\n                  description\\n                  forkCount\\n                  stargazers {\\n                    totalCount\\n                  }\\n                  url\\n                  id\\n                  diskUsage\\n                  primaryLanguage {\\n                    name\\n                    color\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n        \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect,useContext,Suspense,lazy}from\"react\";import ApolloClient from\"apollo-boost\";import{gql}from\"apollo-boost\";import\"./Project.css\";import Button from\"../../components/button/Button\";import{openSource,socialMediaLinks}from\"../../portfolio\";import StyleContext from\"../../contexts/StyleContext\";import Loading from\"../../containers/loading/Loading\";export default function Projects(){var GithubRepoCard=lazy(function(){return import(\"../../components/githubRepoCard/GithubRepoCard\");});var FailedLoading=function FailedLoading(){return null;};var renderLoader=function renderLoader(){return/*#__PURE__*/React.createElement(Loading,null);};var _useState=useState([]),_useState2=_slicedToArray(_useState,2),repo=_useState2[0],setrepo=_useState2[1];// todo: remove useContex because is not supported\nvar _useContext=useContext(StyleContext),isDark=_useContext.isDark;useEffect(function(){getRepoData();},[]);function getRepoData(){var client=new ApolloClient({uri:\"https://api.github.com/graphql\",request:function request(operation){operation.setContext({headers:{authorization:\"Bearer \".concat(openSource.githubConvertedToken)}});}});client.query({query:gql(_templateObject(),openSource.githubUserName)}).then(function(result){setrepoFunction(result.data.user.pinnedItems.edges);console.log(result);}).catch(function(error){console.log(error);setrepoFunction(\"Error\");console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");});}function setrepoFunction(array){setrepo(array);}if(!(typeof repo===\"string\"||repo instanceof String)&&openSource.display){return/*#__PURE__*/React.createElement(Suspense,{fallback:renderLoader()},/*#__PURE__*/React.createElement(\"div\",{className:\"main\",id:\"opensource\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"project-title\"},\"Open Source Projects\"),/*#__PURE__*/React.createElement(\"div\",{className:\"repo-cards-div-main\"},repo.map(function(v,i){return/*#__PURE__*/React.createElement(GithubRepoCard,{repo:v,key:v.node.id,isDark:isDark});})),/*#__PURE__*/React.createElement(Button,{text:\"More Projects\",className:\"project-button\",href:socialMediaLinks.github,newTab:true})));}else{return/*#__PURE__*/React.createElement(FailedLoading,null);}}","map":{"version":3,"sources":["C:/Users/Syed Muzammil/Desktop/portfolio/myapp/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","useContext","Suspense","lazy","ApolloClient","gql","Button","openSource","socialMediaLinks","StyleContext","Loading","Projects","GithubRepoCard","FailedLoading","renderLoader","repo","setrepo","isDark","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","console","log","catch","error","array","String","display","map","v","i","node","id","github"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, Suspense, lazy } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport Button from \"../../components/button/Button\";\nimport { openSource, socialMediaLinks } from \"../../portfolio\";\nimport StyleContext from \"../../contexts/StyleContext\";\nimport Loading from \"../../containers/loading/Loading\";\nexport default function Projects() {\n  const GithubRepoCard = lazy(() =>\n    import(\"../../components/githubRepoCard/GithubRepoCard\")\n  );\n  const FailedLoading = () => null;\n  const renderLoader = () => <Loading />;\n  const [repo, setrepo] = useState([]);\n  // todo: remove useContex because is not supported\n  const { isDark } = useContext(StyleContext);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.user.pinnedItems.edges);\n        console.log(result);\n      })\n      .catch(function (error) {\n        console.log(error);\n        setrepoFunction(\"Error\");\n        console.log(\n          \"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\"\n        );\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n  if (!(typeof repo === \"string\" || repo instanceof String) && openSource.display) {\n    return (\n      <Suspense fallback={renderLoader()}>\n        <div className=\"main\" id=\"opensource\">\n          <h1 className=\"project-title\">Open Source Projects</h1>\n          <div className=\"repo-cards-div-main\">\n            {repo.map((v, i) => {\n              return (\n                <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\n              );\n            })}\n          </div>\n          <Button\n            text={\"More Projects\"}\n            className=\"project-button\"\n            href={socialMediaLinks.github}\n            newTab={true}\n          />\n        </div>\n      </Suspense>\n    );\n  } else {\n    return <FailedLoading />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}